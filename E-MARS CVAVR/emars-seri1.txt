#include <mega32.h>
#include <delay.h>
#include <stdio.h>
#include <math.h>

#define en1 PORTB.0
#define cw1 PORTB.1
#define ccw1 PORTB.2


#define en2 PORTB.5
#define cw2 PORTB.3
#define ccw2 PORTB.4


#define en3 PORTD.2
#define cw3 PORTD.4
#define ccw3 PORTD.3


#define en4 PORTD.7
#define cw4 PORTD.6
#define ccw4 PORTD.5

#define cos30   0.866   
#define cos45   0.707  
#define cos60   0.5 


#define rad2deg (180/(4*atan((float)1)))

// I2C Bus functions
#asm
   .equ __i2c_port=0x15 ;PORTC
   .equ __sda_bit=1
   .equ __scl_bit=0
#endasm
#include <i2c.h>

#define RXB8 1
#define TXB8 0
#define UPE 2
#define OVR 3
#define FE 4
#define UDRE 5
#define RXC 7

#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<OVR)
#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)

// USART Receiver buffer
#define RX_BUFFER_SIZE 8
char rx_buffer[RX_BUFFER_SIZE];

#if RX_BUFFER_SIZE<256
unsigned char rx_wr_index,rx_rd_index,rx_counter;
#else
unsigned int rx_wr_index,rx_rd_index,rx_counter;
#endif

// This flag is set on USART Receiver buffer overflow
bit rx_buffer_overflow;

static int x_r, y_r, x_g, y_g, x_b, y_b, x_y, y_y; 
int flag;
float sudut=0, magnitude=0;
static int s_rg, s_rb, m_rg, m_rb;

float Fa,Fb,Fc,Fd;  
int Vel=180;

float er=0,der,P,D;
static signed int laster;
signed int m;
int Kp=10;
int Kd=2;

char sData[4];
char RIndex;
  
unsigned int KonversiDataSerial()
{
    unsigned int Hasil=0;
    Hasil = (sData[1]-48) *100;
    Hasil += (sData[2]-48) *10;
    Hasil += sData[3]-48;
    putchar(13);
    putchar(Hasil/100+48);
    putchar((Hasil/10)%10+48);
    putchar(Hasil%10+48);
    putchar('L'); 
    putchar(13); 
    return Hasil;    
}

// USART Receiver interrupt service routine
interrupt [USART_RXC] void usart_rx_isr(void)
{
char status,data;
status=UCSRA;
data=UDR;

if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
   {      
    if (data == 'R' || data == 'r' ||data == 'G' ||data == 'g' ||data =='B' ||data == 'b' ||data == 'Y' ||data == 'y' ) 
    {
        sData[0]=data;   
        RIndex = 1;
    }  
    else if (data == 13)
    {   //cek isi dari header
        switch (sData[0])
        {  
            case 'R': x_r = KonversiDataSerial(); flag=1; break;
            case 'r': y_r = KonversiDataSerial(); break;
            case 'G': x_g = KonversiDataSerial(); break;
            case 'g': y_g = KonversiDataSerial(); break;
            case 'B': x_b = KonversiDataSerial(); break;
            case 'b': y_b = KonversiDataSerial(); break;
            case 'Y': x_y = KonversiDataSerial(); break;
            case 'y': y_y = KonversiDataSerial(); break;
        }
    } 
    else
    {
        sData[RIndex]=data;
        if(RIndex>4) RIndex=0;
        else RIndex++;
    }                                                                      
//   rx_buffer[rx_wr_index]=data;
//   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
//   if (++rx_counter == RX_BUFFER_SIZE)
//      {
//      rx_counter=0;
//      rx_buffer_overflow=1;
//      };
     
   };
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
char data;
while (rx_counter==0);
data=rx_buffer[rx_rd_index];
if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
#asm("cli")
--rx_counter;
#asm("sei")
return data;
}
#pragma used-
#endif

unsigned char kompas(char reg)

{int data;

i2c_start();

i2c_write(0xC0);

i2c_write(reg);

i2c_start();

i2c_write(0xc1);

data=i2c_read(0);

i2c_stop();

return data;

}

// Standard Input/Output functions
#include <stdio.h>
unsigned int a,pwm1,pwm2,pwm3,pwm4;

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
// Place your code here
a++;
if(a<=pwm1)en1=0;   else en1=1;
if(a<=pwm2)en2=0;   else en2=1;
if(a<=pwm3)en3=0;   else en3=1;
if(a<=pwm4)en4=0;   else en4=1;
}

void stop()
{
    cw1=0; ccw1=0; cw2=0; ccw2=0;   cw3=0; ccw3=0; cw4=0; ccw4=0; 
}

void maju(unsigned char v)
{ 
   en1=v*cos60; cw1=0; ccw1=1;    en2=v*cos60; cw2=1; ccw2=0;  
   en3=v*cos45; cw3=0; ccw3=1;    en4=v*cos45; cw4=1; ccw4=0;
}

void mundur(unsigned char v)
{
    en1=v*cos60; cw1=1; ccw1=0;    en2=v*cos60; cw2=0; ccw2=1;  
    en3=v*cos45; cw3=1; ccw3=0;    en4=v*cos45; cw4=0; ccw4=1;
}

void maju_ka(unsigned char v)
{
    en1=v*cos30; cw1=1; ccw1=0;    en3=v*cos45; cw3=0; ccw3=1; 
    en2=v*cos30; cw2=1; ccw2=0;    en4=v*cos45; cw4=0; ccw4=1;
}

void maju_ki(unsigned char v)
{
    en2=v*cos30; cw2=0; ccw2=1;    en4=v*cos45; cw4=1; ccw4=0;
    en1=v*cos30; cw1=0; ccw1=1;    en3=v*cos45; cw3=1; ccw3=0;
}

void sermaka(unsigned char v)
{
    en2=v*cos60; cw2=1; ccw2=0;  en3=v*cos45; cw3=0; ccw3=1;
}

void sermaki(unsigned char v)
{
    en1=v*cos60; cw1=0; ccw1=1;  en4=v*cos45; cw4=1; ccw4=0;
}


void sermunka(unsigned char v)
{
    en1=v*cos60; cw1=1; ccw1=0;  en4=v*cos45; cw4=0; ccw4=1;
}

void sermunki(unsigned char v)
{
    en2=v*cos60; cw2=0; ccw2=1;  en3=v*cos45; cw3=1; ccw3=0;
}


//-------------PERHITUNGAN Angle && Magnitude---------------------//  
void hitung(float xo, float yo, float xt, float yt)
{
	long int sd, m;
	float x,x1;
	float y,y1;
	//hitung selisih koordinat
	x1=xt-xo; 
    x=sqrt(pow(x1,2));
    
    y1=yt-yo; 
    y=sqrt(pow(y1,2));
	
     
	m = sqrt(pow(x,2)  + pow(y,2));
	sd = atan2(y,x);

	//Penentuan Kuadran
	if(xo<=xt && yo>=yt)        sudut=sd;	    //kuadran 1    
	else if(xo>=xt && yo>=yt)   sudut=180-sd;	//kuadran 2    
	else if(xo>=xt && yo<=yt)   sudut=sd+180;	//kuadran 3    
	else if(xo<=xt && yo<=yt)   sudut=360-sd;	//kuadran 4	
}

//------------Kinematik------------

void CW_CCW_motor(float a, float b, float c, float d)
{
    if(a<0){ cw1=1; ccw1=0; en1=-a; }    else { cw1=0; ccw1=1; en1=a; }  
    if(b<0){ cw2=1; ccw2=0; en2=-b; }    else { cw2=0; ccw2=1; en2=b; }
    if(c<0){ cw3=1; ccw3=0; en3=-c; }    else { cw3=0; ccw3=1; en3=c; }
    if(d<0){ cw4=1; ccw4=0; en4=-d; }    else { cw4=0; ccw4=1; en4=d; }
}

void Gerak_linier(float alpha)
{  
    Fa=Vel*cos(30-alpha);
    Fb=Vel*cos(150-alpha);
    Fc=Vel*cos(225-alpha);
    Fd=Vel*cos(315-alpha);    
}

void Move(float alpha2)          //Linier + Angular
{
    float Fang, f1,f2,f3,f4; 
    int radius=8;  
    float dkompas;
       
    kompas(1);
    dkompas=kompas(1)*1.41176470588235;

    Gerak_linier(alpha2);
    
    Fang=(Vel/radius);   //Gerak Angular  
    
     er=alpha2-dkompas;        ///Set PD controller
        P=Kp*er;
     der=er-laster;
         D=Kd*der;     
     laster=er;
         m=P+D;
                      
     if(er<0)
     {
      f1=Fa-Fang-m;
      f2=Fb-Fang-m;
      f3=Fc-Fang-m;
      f4=Fd-Fang-m;
     }
     else if(er>0)
     {
      f1=Fa+Fang+m;
      f2=Fb+Fang+m;
      f3=Fc+Fang+m;
      f4=Fd+Fang+m;
     }
     
     CW_CCW_motor(f1,f2,f3,f4);
}

void ketarget(float sudut, int jarak)   //Pergerakan Menuju Target
{
    if(jarak>10)
    {   
        Move(sudut);
    }
    else stop();
}

#include <delay.h>

#define ADC_VREF_TYPE 0x20

// Read the 8 most significant bits
// of the AD conversion result
unsigned char read_adc(unsigned char adc_input)
{
ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=0x40;
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
ADCSRA|=0x10;
return ADCH;
}

// Declare your global variables here

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0x00;

// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x3F;
// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTD=0x00;
DDRD=0xFC;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 11059.200 kHz
// Mode: Fast PWM top=FFh
// OC0 output: Disconnected
TCCR0=0x49;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer 1 Stopped
// Mode: Normal top=FFFFh
// OC1A output: Discon.
// OC1B output: Discon.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer 1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0x00;
TCCR1B=0x00;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer 2 Stopped
// Mode: Normal top=FFh
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x01;

// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=0x00;
UCSRB=0x98;
UCSRC=0x86;
UBRRH=0x00;
UBRRL=0x47;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC Clock frequency: 691.200 kHz
// ADC Voltage Reference: AREF pin
// Only the 8 most significant bits of
// the AD conversion result are used
ADMUX=ADC_VREF_TYPE & 0xff;
ADCSRA=0x84;

// I2C Bus initialization
i2c_init();

// Global enable interrupts
#asm("sei")

while (1)
      {      
       //      Place your code here          
//       hitung(x_r,y_r, x_b, y_b);  s_rb=sudut;     m_rb=magnitude;    ketarget(s_rb, m_rb);       
         if (flag==1) ketarget(100,x_r);  
         else stop();  
      };
}
